#!/bin/bash
#
# Shutdown any existing catapult.server processes found by process name
#
killProcess() {
  echo "Checking for existing process"
  if pgrep -f "aen.server" > /dev/null
  then
      echo "Shutting down existing instance of Catapult"
      pkill -f "aen.server"
  fi
}
#
# Clear up some of the files in the home working path that create problems upon
# Catapult segfaults
#
preRun() {
  echo "Running pre run procedures"
  # Make sure file lock is OK
  if [ -f ~/.aen/data/file.lock ]; then
    echo 'Deleting old lock file'
    rm -f ~/.aen/data/file.lock
  fi
  # If catapult segfaulted, chance this path corrupt
  # if [ -d ~/.aen/data/statedb ]; then
  #   echo 'Deleting corrupt statedb path'
  #   rm -Rf ~/.aen/data/statedb
  # fi
  # Wait until Mongo is alive
  while [ -z "`netstat -tln | grep 27017`" ]; do
    echo 'Waiting for Mongo to start ...'
    sleep 1
  done
  echo "Finished prerun procedure"
}
#
# Function for catching shutdown signals
#
_term() {
  echo 'SHUTTING DOWN'
  killProcess
  exit 1
}
trap _term SIGINT SIGTERM
#
# VARIABLES
#
CATAPULT_PATH="$HOME/.aen/chain"
#
# START
#
cd "$CATAPULT_PATH"
# Clean environment
killProcess
preRun
# If there is a problem going on, prevent thrashing
# sleep 30
# To prevent race condition sleep and then make sure it really isn't running
echo "Catapult starting from - $CATAPULT_PATH"
./aen.server ..
